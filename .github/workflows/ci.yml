name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  BUILD_TYPE: Release

jobs:
  build-and-test:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: "Ubuntu Latest GCC",
              os: ubuntu-latest,
              cc: "gcc",
              cxx: "g++",
              build_type: "Release"
            }
          - {
              name: "Ubuntu Latest Clang",
              os: ubuntu-latest,
              cc: "clang",
              cxx: "clang++",
              build_type: "Release"
            }
          - {
              name: "macOS Latest",
              os: macos-latest,
              cc: "clang",
              cxx: "clang++",
              build_type: "Release"
            }
          - {
              name: "Windows Latest MSVC",
              os: windows-latest,
              cc: "cl",
              cxx: "cl",
              build_type: "Release"
            }
          - {
              name: "Ubuntu Debug Build",
              os: ubuntu-latest,
              cc: "gcc",
              cxx: "g++",
              build_type: "Debug"
            }

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            clang-format \
            clang-tidy \
            cppcheck \
            lcov

      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew install cmake ninja

      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
          choco install ninja

      - name: Configure CMake
        run: |
          cmake -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
            -DProject_ENABLE_UNIT_TESTING=ON \
            -DProject_ENABLE_CCACHE=OFF \
            -G Ninja
        env:
          CC: ${{ matrix.config.cc }}
          CXX: ${{ matrix.config.cxx }}

      - name: Build
        run: cmake --build build --config ${{ matrix.config.build_type }}

      - name: Run tests
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{ matrix.config.build_type }} --output-on-failure --verbose

  static-analysis:
    name: Static Analysis (Clang-Tidy)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            clang \
            clang-tidy

      - name: Configure CMake with Clang-Tidy
        run: |
          cmake -B build \
            -DCMAKE_BUILD_TYPE=Debug \
            -DProject_ENABLE_UNIT_TESTING=ON \
            -DProject_ENABLE_CLANG_TIDY=ON \
            -DProject_ENABLE_CCACHE=OFF \
            -G Ninja
        env:
          CC: clang
          CXX: clang++

      - name: Build with static analysis
        run: cmake --build build --config Debug

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            lcov

      - name: Configure CMake with coverage
        run: |
          cmake -B build \
            -DCMAKE_BUILD_TYPE=Debug \
            -DProject_ENABLE_UNIT_TESTING=ON \
            -DProject_ENABLE_CODE_COVERAGE=ON \
            -DProject_ENABLE_CCACHE=OFF \
            -G Ninja
        env:
          CC: gcc
          CXX: g++

      - name: Build
        run: cmake --build build --config Debug

      - name: Run tests
        working-directory: ${{github.workspace}}/build
        run: ctest -C Debug --output-on-failure --verbose

      - name: Generate coverage report
        working-directory: ${{github.workspace}}/build
        run: |
          lcov --capture --directory . --output-file coverage.info
          lcov --remove coverage.info '/usr/*' '*/test/*' '*/build/_deps/*' --output-file coverage.info
          lcov --list coverage.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./build/coverage.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  formatting-check:
    name: Code Formatting Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install clang-format
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-format

      - name: Check code formatting
        run: |
          find include/ src/ test/ -name '*.hpp' -o -name '*.cpp' | \
          xargs clang-format --dry-run --Werror

  sanitizers:
    name: Address Sanitizer
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build

      - name: Configure CMake with ASan
        run: |
          cmake -B build \
            -DCMAKE_BUILD_TYPE=Debug \
            -DProject_ENABLE_UNIT_TESTING=ON \
            -DProject_ENABLE_ASAN=ON \
            -DProject_ENABLE_CCACHE=OFF \
            -G Ninja
        env:
          CC: clang
          CXX: clang++

      - name: Build
        run: cmake --build build --config Debug

      - name: Run tests with ASan
        working-directory: ${{github.workspace}}/build
        run: ctest -C Debug --output-on-failure --verbose

